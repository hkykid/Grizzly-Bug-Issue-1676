<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    version="3.0">
    <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Development</param-value>
    </context-param>
    
    <!-- PrimesFace FileUpload Filter needed in order for the mission setup page to be able to 
         import mission templates. -->
    <filter>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <filter-class>org.primefaces.webapp.filter.FileUploadFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>PrimeFaces FileUpload Filter</filter-name>
        <servlet-name>Faces Servlet</servlet-name>
    </filter-mapping>
    
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>/faces/*</url-pattern>
    </servlet-mapping>
    
    <!-- This is for the required servlet for PrimeFaces push.  -->
    <servlet>
        <servlet-name>Push Servlet</servlet-name>
        <servlet-class>org.primefaces.push.PushServlet</servlet-class>
        
        <!-- This appears to be a new option as of atmosphere 1.0.12. The property specifies
             if order of message delivered to the client is not important. Default is false. -->
        <init-param>
            <param-name>org.atmosphere.cpr.Broadcaster.supportOutOfOrderBroadcast</param-name>
            <param-value>true</param-value>
        </init-param>
        
        <!-- BroadcasterCache enables caching of of messages pushed over a Broadcaster.
            A broadcaster is the main mechanism that is used to distribute messages to 
            subscribers (clients). The caching of messages is needed because a connection
            can be closed while the Broadcaster is still in the process of delivering a
            message to subscribers. Specifically, loss of messages is most noticeable on 
            browsers that only support long-polling (IE). The UUIDBroadcasterCache uses the unique 
            UUID generated by the Atmosphere Framework and shared with the clients using 
            X-Atmosphere-Tracking-id. -->
        <init-param>
            <param-name>org.atmosphere.cpr.broadcasterCacheClass</param-name>
            <param-value>org.atmosphere.cache.UUIDBroadcasterCache</param-value>
        </init-param>
        
         <!-- The AtmosphereInterceptor is needed to get PrimeFaces Push to work properly.
                 this interceptor adds a special String "|" at the end of a broadcasted message. 
                 This is done so that the atmosphere.js javascript client can detect if one or 
                 several messages were aggregated in one write operation and delivered in a
                 single message. -->
        <init-param>
            <param-name>org.atmosphere.cpr.AtmosphereInterceptor</param-name>
            <param-value>org.atmosphere.client.TrackMessageSizeInterceptor</param-value>
        </init-param>
        
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>Push Servlet</servlet-name>
        <url-pattern>/primepush/*</url-pattern>
    </servlet-mapping>
    
    <session-config>
        <session-timeout>120</session-timeout>
    </session-config>
    <welcome-file-list>
        <welcome-file>faces/pages/counter.xhtml</welcome-file>
    </welcome-file-list>
    
    
    <!-- It has been decided to go with the server state saving method because of the way it saves the componenent tree.
         Since the component tree is saved within the user's session, memory usage will be high on the server but 
         bandwidth usage between client and server will be low because less data about the tree has to be transmitted 
         by the client. However, this method does not scale well if a large number of users are connected at the same time.
         We currently expect the number of users to remain small. -->
    <context-param>
        <description>State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2</description>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>server</param-value>
    </context-param>
    <context-param>
        <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
        <param-value>resources.application</param-value>
    </context-param>
    <listener>
        <listener-class>com.sun.faces.config.ConfigureListener</listener-class>
    </listener>
    
    
    <!-- Define the JP2 mime type since Glassfish does not recognize JP2 files. -->
    <mime-mapping> 
        <extension>jp2</extension> 
        <mime-type>image/jp2</mime-type> 
    </mime-mapping>
</web-app>